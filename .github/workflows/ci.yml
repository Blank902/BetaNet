name: Betanet C Library CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly to catch dependency issues
    - cron: '0 2 * * 1'

env:
  # Reproducible builds
  SOURCE_DATE_EPOCH: 1700000000

jobs:
  # Basic build and test across platforms
  build-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang]
        build_type: [Debug, Release]
        exclude:
          # Windows doesn't have gcc in the same way
          - os: windows-latest
            compiler: gcc
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libssl-dev
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            sudo apt-get install -y clang
          else
            sudo apt-get install -y gcc
          fi
      
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake ninja openssl
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            echo "Using system clang"
          else
            brew install gcc
          fi
      
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake ninja openssl
      
      - name: Set compiler
        shell: bash
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          else
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          fi
      
      - name: Configure
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            CMAKE_C_COMPILER="clang"
          else
            CMAKE_C_COMPILER="gcc"
          fi
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER="$CMAKE_C_COMPILER" \
            -DCMAKE_C_FLAGS="-Wall -Wextra -Werror"
      
      - name: Build
        run: cmake --build build
      
      - name: Run unit tests
        run: |
          cd build
          ctest --output-on-failure --verbose
      
      - name: Run integration tests
        run: |
          ./build/tests/interop/interop_protocol_test
          ./build/tests/integration/end_to_end_test || echo "Integration test may require network setup"
      
      - name: Run regression tests
        run: |
          ./build/tests/unit/fingerprint_regression_test
          ./build/tests/unit/protocol_regression_test

  # Security-focused builds with sanitizers
  security-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [address, memory, thread, undefined]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang ninja-build libssl-dev
      
      - name: Configure with ${{ matrix.sanitizer }} sanitizer
        run: |
          SANITIZER_FLAGS="-fsanitize=${{ matrix.sanitizer }}"
          if [ "${{ matrix.sanitizer }}" = "memory" ]; then
            SANITIZER_FLAGS="$SANITIZER_FLAGS -fsanitize-memory-track-origins"
          fi
          
          cmake -B build-${{ matrix.sanitizer }} -G Ninja \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_C_FLAGS="$SANITIZER_FLAGS -g -O1 -fno-omit-frame-pointer" \
            -DCMAKE_EXE_LINKER_FLAGS="$SANITIZER_FLAGS"
      
      - name: Build
        run: cmake --build build-${{ matrix.sanitizer }}
      
      - name: Run tests with sanitizer
        run: |
          cd build-${{ matrix.sanitizer }}
          ctest --output-on-failure || echo "Some tests may fail with ${{ matrix.sanitizer }} sanitizer"

  # Static analysis
  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang ninja-build libssl-dev \
            clang-tools cppcheck
      
      - name: Configure
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      
      - name: Run clang-tidy
        run: |
          find src include -name "*.c" -o -name "*.h" | \
          xargs clang-tidy -p build --checks='-*,readability-*,performance-*,bugprone-*,clang-analyzer-*'
      
      - name: Run cppcheck
        run: |
          cppcheck --enable=all --inconclusive --std=c11 \
            --suppress=missingIncludeSystem \
            --error-exitcode=1 \
            src/ include/

  # Fuzzing (short smoke test)
  fuzz-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang ninja-build libssl-dev
      
      - name: Configure fuzz targets
        run: |
          cmake -B build-fuzz -G Ninja \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_C_FLAGS="-fsanitize=fuzzer,address,undefined -g -O1"
      
      - name: Build fuzz targets
        run: cmake --build build-fuzz
      
      - name: Run fuzzing (smoke test)
        run: |
          # Run each fuzzer for 30 seconds as smoke test
          timeout 30s ./build-fuzz/tests/unit/ticket_parser_fuzz || echo "Fuzzer completed/timeout"

  # Code coverage
  coverage:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc ninja-build libssl-dev gcov lcov
      
      - name: Configure with coverage
        run: |
          cmake -B build-coverage -G Ninja \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_C_FLAGS="--coverage -g -O0"
      
      - name: Build
        run: cmake --build build-coverage
      
      - name: Run tests
        run: |
          cd build-coverage
          ctest --output-on-failure
      
      - name: Generate coverage report
        run: |
          lcov --directory build-coverage --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info
      
      - name: Upload coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.info

  # Cross-platform compatibility
  cross-compile:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [arm64, armhf]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
      
      - name: Configure cross-compilation
        run: |
          if [ "${{ matrix.target }}" = "arm64" ]; then
            CMAKE_TOOLCHAIN_FILE="cmake/toolchain-aarch64.cmake"
            CC="aarch64-linux-gnu-gcc"
          else
            CMAKE_TOOLCHAIN_FILE="cmake/toolchain-armhf.cmake"
            CC="arm-linux-gnueabihf-gcc"
          fi
          
          # Create minimal toolchain file
          mkdir -p cmake
          cat > "$CMAKE_TOOLCHAIN_FILE" << EOF
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_C_COMPILER $CC)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          
          cmake -B build-${{ matrix.target }} -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$CMAKE_TOOLCHAIN_FILE" \
            -DBETANET_USE_MINIMAL_CRYPTO=ON
      
      - name: Build
        run: cmake --build build-${{ matrix.target }}

  # Documentation check
  documentation:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install documentation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz
          sudo npm install -g markdownlint-cli
      
      - name: Check markdown formatting
        run: |
          markdownlint README.md DEVELOPER_GUIDE.md SECURITY_NOTES.md \
            technical-overview.md || echo "Markdown issues found"
      
      - name: Generate API documentation
        run: |
          doxygen Doxyfile 2>&1 | tee doxygen.log
          if grep -i "warning\|error" doxygen.log; then
            echo "Documentation warnings/errors found"
            exit 1
          fi

  # SLSA provenance for releases
  provenance:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang ninja-build libssl-dev
      
      - name: Configure (reproducible)
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS="-O2 -DNDEBUG"
      
      - name: Build (reproducible)
        run: cmake --build build
      
      - name: Generate build artifacts checksum
        run: |
          cd build
          find . -name "*.a" -o -name "*.so" -o -name "bnetc-cli" | \
          xargs sha256sum > ../artifacts.sha256
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: betanet-artifacts
          path: |
            build/libbetanetc/libbetanetc.a
            build/cli/bnetc-cli/bnetc-cli
            artifacts.sha256